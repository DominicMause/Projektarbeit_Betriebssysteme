#   Installation Deutsch

    1.  Projektarbeit_Betriebssysteme in Qt-Workplace verschieben.
    2.  Neues Projekt erstellen.
    3.  Beide Projekte in Qt Creator öffnen.
    4.  Projektarbeit_Betriebssysteme qmake ausführen und erstellen.
        (hier wird ein Ordner Release erstellt)
    5.  Neues Projekt rechtsklicken und Bibliothek hinzufügen.
    6.  Externe Bibliothek auswählen.
    7.  Bibliotheksdatei -> Releas Ordner von Schritt 3 auswählen.
        in den Unterordner release und die SchedulingSimulatorLib.lib Datei auswählen.
    8.  Includepath -> Releas Ordner von Schritt 3 auswählen.
    9.  Es kann sein, dass Qt das Projekt nicht richtig verlinkt, daher die APITester.pro Datei öffnen und folgende
        Zeile ganz ans Ende der Datei schreiben.
            INCLUDEPATH += $$PWD/../Projektarbeit_Betriebssysteme
    10.  Neues Projekt qmake ausführen und erstellen.
    11. Fertig

#   Bedienungsanleitung Deutsch

    1.  Nachdem die Library erfolgreich hinzugefügt wurde müssen nun mainwindow.h
        und simulationcontroller.h includiert werden.
    2.  Nun kann eine Instanz vom Typ MainWindow angelegt werden sowie eine weitere vom Typ SimulationController.
    3.  Als nächstes muss dem SimulationController über die setWindow() Funktion
        ein Pointer der MainWindow übergeben werden.

    Anmerkung:  Eine Grundlegende Auswahl an Algorithmen zur Sortierung der Prozesse ist
                bereits vorhanden diese lässt sich jedoch erweitern.

    Eigene Prozesse hinzufügen:
        Mithilfe der addProcesses() Funktion ist es möglich eine Liste an Prozessen vom Typ Process zu übergeben.

    Eigene Algorithmen Hinzufügen:
        Mithilfe der addAlgorithem() Funktion ist es möglich eine statische funktionsreferenz zu übergeben welche
        eine Liste an Prozessen (QList<Process>) erhält und auch zurrück gibt.

    Ein Beispiel zum Prozess hinzufügen liegt in Bildern bei (maincpp.JPG und createProcess.JPG)

#   Konzept Deutsch

    Die Idee des Projekts ist es, verschiedene Sortieralgorithmen zu simulieren und zu vergleichen.
    Hierzu schufen wir eine Umgebung, in welcher ein Algorithmus eine Liste an Prozessen soriteren und ausführen soll.
    Nach jedem durchlauf soll die vergangede Zeit sowie die sortierte Liste ausgegeben werden.
    Dafür stellten wir dem Controller ein UI zur verfügung, über welches sowhol der aktuelle Algorithmus ausgelsen wird,
    sowie die Prozessliste.
    Außerdem haben wir ein Log hinzugefügt, um genauer zu sehen was in der Simulation gerade geschieht.

#   Installation English

    1.  move project Projektarbeit_Betriebssysteme and APITester to Qt Workplace.
    2.  create new project.
    2.  open both projects in Qt Creator
    3.  execute qmake and build project Projektarbeit_Betriebssysteme.
        (a Release folder will be created here)
    4.  right click new project and add library.
    5.  select external library.
    6.  select library file -> release folder from step 3
        into the subfolder release and select the SchedulingSimulatorLib.lib file.
    7.  select Includepath -> Releas folder from step 3.
    8.  it is possible that Qt does not link the project correctly, therefore open the APITester.pro file and select the following
        Write line to the very end of the file.
            INCLUDEPATH += $$PWD/../Projektarbeit_Betriebssysteme
    9.  execute qmake and build new project.
    10. ready

#   Instruction manual English

    1.  After the library has been successfully added, mainwindow.h and simulationcontroller.h must be included.
    2.  The next step is to create an instance of the type MainWindow and another one of the type SimulationController.
    3.  Next a pointer of the MainWindow must be passed to the SimulationController via the setWindow() function.

    Note:   A basic set of algorithms for sorting the process is already available but can be extended.

    Add your own processes:
        With the addProcesses() function it is possible to pass a list of processes of type Process.

    Add custom algorithms:
        With the help of the addAlgorithem() function it is possible to pass a static function
        reference that receives and returns a list of processes (QList<Process>).

    An example of adding a process is included in images (maincpp.JPG and createProcess.JPG)

#   Concept English

    The idea of the project is to simulate and compare different sorting algorithms.
    For this purpose, we created an environment in which one algorithm should sort and execute a list of processes.
    After each run the elapsed time and the sorted list should be displayed.
    For this purpose we provided the controller with a UI, which is used to evaluate the current algorithm,
    and the process list.
    We have also added a log to see what is happening in the simulation.
